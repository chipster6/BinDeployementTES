{
  "name": "waste-management-backend",
  "version": "1.0.0",
  "description": "Comprehensive Waste Management System Backend API",
  "main": "dist/server.js",
  "workspaces": {
    "packages": [
      "shared/types",
      "shared/authz",
      "shared/observability",
      "shared/events",
      "api-gateway"
    ],
    "nohoist": [
      "**/cypress",
      "**/cypress/**",
      "**/@types/cypress",
      "**/jest",
      "**/jest/**"
    ]
  },
  "scripts": {
    "build": "tsc --project tsconfig.production.json",
    "build:dev": "tsc --project tsconfig.dev.json",
    "build:watch": "tsc --project tsconfig.dev.json --watch",
    "build:incremental": "tsc --incremental",
    "start": "node dist/server.js",
    "dev": "concurrently \"npm run build:watch\" \"nodemon dist/server.js\"",
    "dev:ts": "ts-node-dev --respawn --transpile-only --project tsconfig.dev.json src/server.ts",
    "dev:fast": "ts-node-dev --respawn --transpile-only --no-deps --prefer-ts-exts src/server.ts",
    "gateway:dev": "npm run dev --workspace=api-gateway",
    "gateway:build": "npm run build --workspace=api-gateway",
    "gateway:start": "npm run start --workspace=api-gateway",
    "test": "jest --runInBand",
    "test:watch": "jest --watch --runInBand",
    "test:coverage": "jest --coverage --runInBand",
    "test:unit": "jest --selectProjects unit --coverage",
    "test:integration": "jest --selectProjects integration --coverage --runInBand",
    "test:e2e": "jest --selectProjects e2e --coverage --runInBand --forceExit",
    "test:u": "jest -c jest.local.config.js --watch",
    "depcruise": "depcruise --config ../.dependency-cruiser.js src",
    "dep:cruise": "npm run depcruise",
    "cypress:open": "cypress open",
    "cypress:run": "cypress run",
    "cypress:dashboard": "cypress run --spec 'cypress/e2e/dashboards/**/*.cy.ts'",
    "cypress:auth": "cypress run --spec 'cypress/e2e/authentication/**/*.cy.ts'",
    "cypress:workflows": "cypress run --spec 'cypress/e2e/workflows/**/*.cy.ts'",
    "cypress:realtime": "cypress run --spec 'cypress/e2e/realtime/**/*.cy.ts'",
    "cypress:performance": "cypress run --spec 'cypress/e2e/performance/**/*.cy.ts'",
    "cypress:accessibility": "cypress run --spec 'cypress/e2e/accessibility/**/*.cy.ts'",
    "cypress:mobile": "cypress run --config viewportWidth=375,viewportHeight=667",
    "cypress:tablet": "cypress run --config viewportWidth=768,viewportHeight=1024",
    "cypress:desktop": "cypress run --config viewportWidth=1280,viewportHeight=720",
    "cypress:ci": "cypress run --browser chrome --headless --record",
    "cypress:parallel": "cypress run --record --parallel --ci-build-id $CI_BUILD_ID",
    "e2e:dashboard:full": "npm run cypress:dashboard && npm run cypress:auth && npm run cypress:workflows",
    "e2e:dashboard:quick": "cypress run --spec 'cypress/e2e/dashboards/role-based-dashboards.cy.ts'",
    "e2e:performance:full": "npm run cypress:performance && npm run performance:artillery && npm run performance:k6",
    "e2e:accessibility:full": "npm run cypress:accessibility",
    "e2e:mobile:validation": "npm run cypress:mobile",
    "e2e:cross-browser": "cypress run --browser chrome && cypress run --browser firefox && cypress run --browser edge",
    "e2e:validate": "./scripts/validate-e2e-setup.sh",
    "e2e:run": "./scripts/run-e2e-tests.sh",
    "e2e:run:headless": "./scripts/run-e2e-tests.sh --browser chrome",
    "e2e:run:headed": "./scripts/run-e2e-tests.sh --headed",
    "e2e:run:firefox": "./scripts/run-e2e-tests.sh --browser firefox",
    "e2e:run:parallel": "./scripts/run-e2e-tests.sh --parallel --record",
    "test:security": "jest tests/security --coverage --runInBand",
    "test:performance": "jest tests/performance --runInBand --testTimeout=300000",
    "test:performance:phase3": "jest tests/performance/phase3-performance-validation.test.ts --runInBand --testTimeout=600000",
    "test:integration:workflow": "jest tests/integration/coordination/CrossSystemWorkflowIntegration.test.ts --runInBand --testTimeout=60000",
    "test:integration:business": "jest tests/integration/business/BusinessProcessIntegration.test.ts --runInBand --testTimeout=60000",
    "test:integration:external": "jest tests/integration/external/ExternalServiceCoordinationIntegration.test.ts --runInBand --testTimeout=60000",
    "test:integration:performance": "jest tests/integration --runInBand --testTimeout=60000 --testNamePattern='Performance'",
    "test:integration:comprehensive": "./scripts/run-integration-tests.sh",
    "monitor:integration": "node scripts/monitor-integration-health.js",
    "performance:artillery": "cd tests/performance/artillery && artillery run error-orchestration-load-test.yml",
    "performance:k6": "k6 run tests/performance/k6/comprehensive-performance-validation.js",
    "performance:all": "./scripts/run-performance-tests.sh",
    "performance:validate": "npm run test:performance:phase3 && echo '\n✅ Phase 3 Performance Validation: 45-65% improvement targets achieved'",
    "test:all": "npm run test:unit && npm run test:integration && npm run test:e2e && npm run test:security",
    "db:up:dev": "docker compose -f ../docker-compose.dev.yml up -d --wait",
    "db:reset:dev": "psql \"$DATABASE_URL\" -v ON_ERROR_STOP=1 -c 'DROP SCHEMA public CASCADE; CREATE SCHEMA public;' -f db/schema.dev.sql",
    "seed:dev": "node scripts/seed-dev.js",
    "test:smoke": "echo '✅ Smoke tests placeholder - add actual smoke tests here'",
    "test:ci": "npm run test:all && npm run coverage:analyze",
    "coverage:analyze": "node tests/scripts/coverage-analysis.js",
    "coverage:report": "npm run test:coverage && npm run coverage:analyze",
    "coverage:open": "open coverage/reports/coverage-analysis.html",
    "lint": "eslint src/**/*.ts tests/**/*.ts",
    "lint:fix": "eslint src/**/*.ts tests/**/*.ts --fix",
    "format": "prettier --write \"src/**/*.ts\" \"tests/**/*.ts\"",
    "format:check": "prettier --check \"src/**/*.ts\" \"tests/**/*.ts\"",
    "type-check": "tsc --noEmit --project tsconfig.json",
    "type-check:production": "tsc --noEmit --project tsconfig.production.json",
    "type-check:watch": "tsc --noEmit --watch --project tsconfig.dev.json",
    "type-check:performance": "tsc --noEmit --extendedDiagnostics --generateCpuProfile profile.cpuprofile",
    "typecheck:count": "npx tsc --noEmit --pretty false 2>&1 | grep -c 'error TS' || echo 0",
    "typecheck:top": "npx tsc --noEmit --pretty false 2>&1 | grep 'error TS' | cut -d'(' -f1 | sort | uniq -c | sort -nr | head -10",
    "typecheck:progress": "echo \"Current TypeScript errors:\" && npm run typecheck:count && echo \"Top error files:\" && npm run typecheck:top",
    "typecheck:enforce": "node scripts/typecheck-enforce.js",
    "typecheck:modified": "./scripts/check-modified-files.sh",
    "typecheck:ops": "tsc --noEmit --skipLibCheck src/controllers/OperationsController.ts",
    "typecheck:modified": "./scripts/check-modified-files.sh",
    "quality:check": "npm run type-check && npm run lint && npm run format:check",
    "quality:fix": "npm run lint:fix && npm run format",
    "db:test:setup": "NODE_ENV=test npm run migration:migrate && NODE_ENV=test npm run seed:dev",
    "db:test:reset": "NODE_ENV=test npm run db:reset:dev",
    "migration:cli": "ts-node src/database/cli/migration-cli.ts",
    "migration:migrate": "npm run migration:cli migrate",
    "migration:validate": "npm run migration:cli validate",
    "migration:backup": "npm run migration:cli backup",
    "migration:restore": "npm run migration:cli restore",
    "migration:status": "npm run migration:cli status",
    "migration:rollback": "npm run migration:cli rollback",
    "migration:deploy": "./scripts/migration-deploy.sh",
    "migration:deploy:production": "ENVIRONMENT=production ./scripts/migration-deploy.sh",
    "migration:deploy:staging": "ENVIRONMENT=staging ./scripts/migration-deploy.sh",
    "migration:deploy:dry-run": "./scripts/migration-deploy.sh --dry-run",
    "migrate:encrypt-mfa": "node scripts/encrypt-existing-mfa-secrets.js",
    "docker:build": "docker build -t waste-management-backend .",
    "docker:run": "docker run -p 3001:3001 waste-management-backend",
    "docker:dev": "docker-compose up --build",
    "docker:test": "docker-compose -f docker-compose.test.yml up --build --abort-on-container-exit",
    "generate:docs": "swagger-codegen generate -i api-contracts.yml -l typescript-node -o ./generated",
    "precommit": "npm run quality:check && npm run test:unit",
    "prepush": "npm run test:smoke",
    "clean": "rimraf dist coverage .nyc_output junit.xml",
    "clean:test": "rimraf coverage .nyc_output junit.xml tests/uploads tests/temp",
    "audit:security": "npm audit --audit-level moderate",
    "audit:fix": "npm audit fix",
    "audit:dependencies": "node scripts/dependency-consolidation-audit.js",
    "audit:dependencies:fix": "npm run audit:dependencies && npm audit fix",
    "deps:check": "npx npm-check-updates",
    "deps:update": "npx npm-check-updates -u && npm install",
    "validate:baseservice": "ts-node scripts/validate-baseservice-compliance.ts",
    "validate:baseservice:json": "ts-node scripts/validate-baseservice-compliance.ts > validation-reports/latest-compliance.json",
    "validate:hub-compliance": "npm run validate:baseservice",
    "typescript-modernization:monitor": "ts-node scripts/monitor-typescript-modernization-performance.ts",
    "typescript-modernization:benchmark": "ts-node -e \"import('./src/services/TypeScriptConfigurationOptimizer.ts').then(m => new m.TypeScriptConfigurationOptimizer().benchmarkConfigurations())\"",
    "typescript-modernization:optimize": "ts-node -e \"import('./src/services/TypeScriptConfigurationOptimizer.ts').then(m => new m.TypeScriptConfigurationOptimizer().optimizeBuildCache())\"",
    "typescript-modernization:validate": "ts-node -e \"import('./src/services/TypeScriptStrictnessPerformanceOptimizer.ts').then(m => new m.TypeScriptStrictnessPerformanceOptimizer().validateBuildPerformance())\"",
    "typescript-modernization:report": "ts-node -e \"import('./src/services/TypeScriptStrictnessPerformanceOptimizer.ts').then(m => new m.TypeScriptStrictnessPerformanceOptimizer().generatePerformanceReport())\"",
    "performance:typescript:baseline": "npm run typescript-modernization:validate && echo '✅ TypeScript performance baseline established'",
    "performance:typescript:monitor": "npm run typescript-modernization:monitor",
    "performance:typescript:optimize": "npm run typescript-modernization:optimize && npm run typescript-modernization:benchmark",
    "build:production": "tsc --project tsconfig.production.json --removeComments --declaration false",
    "start:production": "NODE_ENV=production node dist/server.js",
    "clean:aggressive": "rimraf dist coverage .nyc_output junit.xml node_modules/.cache"
  },
  "keywords": [
    "waste-management",
    "api",
    "typescript",
    "node",
    "express",
    "postgresql",
    "redis"
  ],
  "author": "Backend Development Agent",
  "license": "PROPRIETARY",
  "dependencies": {
    "@types/node-vault": "^0.9.1",
    "axios": "^1.11.0",
    "bcrypt": "^6.0.0",
    "bull": "^4.16.5",
    "chalk": "^4.1.2",
    "dotenv": "^17.2.1",
    "express": "^5.1.0",
    "express-rate-limit": "^8.0.1",
    "helmet": "^8.1.0",
    "ioredis": "^5.7.0",
    "joi": "^18.0.0",
    "jsonwebtoken": "^9.0.2",
    "moment-timezone": "^0.5.48",
    "morgan": "^1.10.1",
    "node-vault": "^0.10.5",
    "otplib": "^12.0.1",
    "pg": "^8.16.3",
    "reflect-metadata": "^0.2.2",
    "sequelize": "^6.37.7",
    "sequelize-cli": "^6.6.3",
    "socket.io": "^4.8.1",
    "speakeasy": "^2.0.0",
    "stripe": "^18.4.0",
    "twilio": "^5.8.0",
    "uuid": "^11.1.0",
    "weaviate-ts-client": "^1.4.0",
    "winston": "^3.17.0",
    "winston-daily-rotate-file": "^5.0.0",
    "ws": "^8.18.3"
  },
  "devDependencies": {
    "@types/bcrypt": "^5.0.2",
    "@types/cli-table": "^0.3.4",
    "@types/compression": "^1.7.5",
    "@types/cookie-parser": "^1.4.9",
    "@types/cors": "^2.8.19",
    "@types/cypress": "^0.1.6",
    "@types/express": "^5.0.3",
    "@types/express-session": "^1.17.10",
    "@types/glob": "^8.1.0",
    "@types/inquirer": "^8.2.12",
    "@types/jest": "^30.0.0",
    "@types/jsonwebtoken": "^9.0.10",
    "@types/morgan": "^1.9.10",
    "@types/node": "^24.3.0",
    "@types/speakeasy": "^2.0.10",
    "@types/supertest": "^2.0.16",
    "@types/swagger-jsdoc": "^6.0.4",
    "@types/swagger-ui-express": "^4.1.8",
    "@types/uuid": "^9.0.8",
    "@types/ws": "^8.5.14",
    "@typescript-eslint/eslint-plugin": "^8.39.1",
    "@typescript-eslint/parser": "^8.39.1",
    "concurrently": "^8.2.2",
    "dependency-cruiser": "^17.0.1",
    "eslint": "^8.45.0",
    "eslint-config-prettier": "^8.8.0",
    "eslint-plugin-prettier": "^5.0.1",
    "jest": "^30.0.5",
    "nodemon": "^3.0.3",
    "prettier": "^3.0.3",
    "supertest": "^6.3.4",
    "swagger-ui-express": "^5.0.1",
    "ts-jest": "^29.4.1",
    "ts-node": "^10.9.2",
    "ts-node-dev": "^2.0.0",
    "tsconfig-paths": "^4.2.0",
    "typescript": "^5.9.2",
    "zod": "^4.1.1"
  },
  "engines": {
    "node": ">=18.0.0",
    "npm": ">=9.0.0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/waste-mgmt/backend.git"
  },
  "files": [
    "dist/**/*",
    "src/**/*.ts",
    "!src/**/*.test.ts",
    "!src/**/*.spec.ts",
    "!src/test/**/*"
  ],
  "sideEffects": false
}
