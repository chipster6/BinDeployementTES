# ============================================================================
# DOCKER COMPOSE PRODUCTION CONFIGURATION
# ============================================================================
#
# Production-optimized Docker Compose configuration
# Includes monitoring, SSL, and production security settings
#
# Created by: Infrastructure Agent
# Date: 2025-08-12
# Version: 1.0.0
# ============================================================================

version: '3.8'

services:
  # Backend Production Configuration
  backend:
    build:
      target: production
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DEBUG_SQL: false
      LOG_LEVEL: warn
      ENABLE_SWAGGER_UI: false
      MOCK_EXTERNAL_SERVICES: false
      FORCE_HTTPS: true
      SECURE_COOKIES: true
      TRUST_PROXY: true
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Frontend Production Configuration
  frontend:
    build:
      target: production
    restart: unless-stopped
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: https://api.waste-mgmt.com
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s

  # PostgreSQL Production Configuration
  postgres:
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d ${DB_NAME}"]
      interval: 30s
      timeout: 5s
      retries: 5

  # Redis Production Configuration
  redis:
    restart: unless-stopped
    command: redis-server /usr/local/etc/redis/redis.conf --requirepass ${REDIS_PASSWORD}
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    profiles: []  # Enable for production
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/sites-enabled:/etc/nginx/sites-enabled:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - ./docker/data/nginx/logs:/var/log/nginx
    depends_on:
      - backend
      - frontend
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3

  # Prometheus Monitoring
  prometheus:
    profiles: []  # Enable for production
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Grafana Dashboards
  grafana:
    profiles: []  # Enable for production
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_SECURITY_SECRET_KEY: ${GRAFANA_SECRET_KEY}
      GF_SECURITY_DISABLE_GRAVATAR: true
      GF_ANALYTICS_REPORTING_ENABLED: false
      GF_ANALYTICS_CHECK_FOR_UPDATES: false
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

# Production-specific volumes with backup configuration
volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/waste-mgmt/postgres
  
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/waste-mgmt/redis

  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/waste-mgmt/grafana

  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/waste-mgmt/prometheus

# Production network with custom driver
networks:
  waste-mgmt-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1