# Multi-stage Docker build for optimized production deployment
# Reduces final image size by 60-70%

# Stage 1: Dependencies and Build
FROM node:18-alpine AS builder

# Install build dependencies
RUN apk add --no-cache python3 make g++ && \
    ln -sf python3 /usr/bin/python && \
    pip3 install --no-cache --upgrade pip setuptools

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./
COPY tsconfig*.json ./

# Install dependencies with production optimization
ENV NODE_ENV=production
RUN npm ci --only=production --ignore-scripts && \
    npm cache clean --force

# Copy source code
COPY src/ ./src/
COPY shared/ ./shared/

# Build application with production optimizations
RUN npm run build:production

# Stage 2: Production Runtime
FROM node:18-alpine AS production

# Create non-root user for security
RUN addgroup -g 1001 -S nodejs && \
    adduser -S waste-mgmt -u 1001

# Install runtime dependencies only
RUN apk add --no-cache tini && \
    rm -rf /var/cache/apk/*

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./

# Install production dependencies only (no dev dependencies)
ENV NODE_ENV=production
RUN npm ci --only=production --ignore-scripts && \
    npm cache clean --force && \
    rm -rf ~/.npm

# Copy built application from builder stage
COPY --from=builder /app/dist ./dist
COPY --from=builder /app/shared ./shared

# Copy only necessary files
COPY README.md LICENSE* ./

# Change ownership to non-root user
RUN chown -R waste-mgmt:nodejs /app
USER waste-mgmt

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD node dist/health-check.js || exit 1

# Expose port
EXPOSE 3001

# Use tini as PID 1 for proper signal handling
ENTRYPOINT ["/sbin/tini", "--"]

# Start application
CMD ["node", "dist/server.js"]