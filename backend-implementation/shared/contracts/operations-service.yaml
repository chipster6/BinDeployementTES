openapi: 3.0.3
info:
  title: Operations Service API
  version: 1.0.0
  description: Core business operations - customers, bins, service events
  
servers:
  - url: http://localhost:3003
    description: Local development
  - url: https://api.wastemanagement.com/operations/v1
    description: Production

paths:
  /customers:
    get:
      summary: List customers
      operationId: listCustomers
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 50
        - name: organization_id
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            type: string
            enum: [active, inactive, suspended]
      responses:
        '200':
          description: Customers retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Customer'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

    post:
      summary: Create customer
      operationId: createCustomer
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCustomerRequest'
      responses:
        '201':
          description: Customer created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'

  /customers/{customerId}:
    get:
      summary: Get customer by ID
      operationId: getCustomerById
      security:
        - BearerAuth: []
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Customer retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'

    put:
      summary: Update customer
      operationId: updateCustomer
      security:
        - BearerAuth: []
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCustomerRequest'
      responses:
        '200':
          description: Customer updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'

  /customers/{customerId}/bins:
    get:
      summary: Get customer bins
      operationId: getCustomerBins
      security:
        - BearerAuth: []
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: string
        - name: status
          in: query
          schema:
            type: string
            enum: [active, inactive, maintenance, full]
      responses:
        '200':
          description: Customer bins retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Bin'

  /bins:
    get:
      summary: List bins
      operationId: listBins
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 50
        - name: customer_id
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            type: string
            enum: [active, inactive, maintenance, full]
        - name: needs_collection
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: Bins retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Bin'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

    post:
      summary: Create bin
      operationId: createBin
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBinRequest'
      responses:
        '201':
          description: Bin created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bin'

  /bins/{binId}:
    get:
      summary: Get bin by ID
      operationId: getBinById
      security:
        - BearerAuth: []
      parameters:
        - name: binId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Bin retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bin'

    put:
      summary: Update bin
      operationId: updateBin
      security:
        - BearerAuth: []
      parameters:
        - name: binId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBinRequest'
      responses:
        '200':
          description: Bin updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bin'

  /bins/{binId}/status:
    patch:
      summary: Update bin status
      operationId: updateBinStatus
      security:
        - BearerAuth: []
      parameters:
        - name: binId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [status]
              properties:
                status:
                  type: string
                  enum: [active, inactive, maintenance, full]
                reason:
                  type: string
      responses:
        '200':
          description: Bin status updated successfully

  /service-events:
    get:
      summary: List service events
      operationId: listServiceEvents
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 50
        - name: customer_id
          in: query
          schema:
            type: string
        - name: route_id
          in: query
          schema:
            type: string
        - name: event_type
          in: query
          schema:
            type: string
            enum: [pickup, delivery, maintenance, inspection]
        - name: date_from
          in: query
          schema:
            type: string
            format: date
        - name: date_to
          in: query
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Service events retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ServiceEvent'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

    post:
      summary: Create service event
      operationId: createServiceEvent
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateServiceEventRequest'
      responses:
        '201':
          description: Service event created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceEvent'

components:
  schemas:
    Customer:
      type: object
      properties:
        id:
          type: string
        company_name:
          type: string
        contact_name:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        organization_id:
          type: string
        account_manager_id:
          type: string
        status:
          type: string
          enum: [active, inactive, suspended]
        service_frequency:
          type: string
          enum: [weekly, bi_weekly, monthly, on_demand]
        preferred_service_day:
          type: string
          enum: [monday, tuesday, wednesday, thursday, friday, saturday]
        address:
          $ref: '#/components/schemas/Address'
        billing_address:
          $ref: '#/components/schemas/Address'
        payment_terms:
          type: string
          enum: [net_30, net_15, due_on_receipt, credit_card]
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    CreateCustomerRequest:
      type: object
      required: [company_name, contact_name, email, organization_id, service_frequency]
      properties:
        company_name:
          type: string
        contact_name:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        organization_id:
          type: string
        account_manager_id:
          type: string
        service_frequency:
          type: string
          enum: [weekly, bi_weekly, monthly, on_demand]
        preferred_service_day:
          type: string
          enum: [monday, tuesday, wednesday, thursday, friday, saturday]
        address:
          $ref: '#/components/schemas/Address'
        billing_address:
          $ref: '#/components/schemas/Address'
        payment_terms:
          type: string
          enum: [net_30, net_15, due_on_receipt, credit_card]

    UpdateCustomerRequest:
      type: object
      properties:
        company_name:
          type: string
        contact_name:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        account_manager_id:
          type: string
        status:
          type: string
          enum: [active, inactive, suspended]
        service_frequency:
          type: string
          enum: [weekly, bi_weekly, monthly, on_demand]
        preferred_service_day:
          type: string
          enum: [monday, tuesday, wednesday, thursday, friday, saturday]
        address:
          $ref: '#/components/schemas/Address'
        billing_address:
          $ref: '#/components/schemas/Address'
        payment_terms:
          type: string
          enum: [net_30, net_15, due_on_receipt, credit_card]

    Bin:
      type: object
      properties:
        id:
          type: string
        customer_id:
          type: string
        bin_type:
          type: string
          enum: [residential, commercial, recycling, compost, hazardous]
        capacity:
          type: number
          description: Capacity in cubic yards
        current_level:
          type: number
          description: Current fill level (0-100%)
        status:
          type: string
          enum: [active, inactive, maintenance, full]
        needs_collection:
          type: boolean
        last_collected:
          type: string
          format: date-time
        next_scheduled:
          type: string
          format: date-time
        location:
          $ref: '#/components/schemas/Location'
        material_type:
          type: string
          enum: [mixed_waste, recycling, compost, hazardous, yard_waste]
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    CreateBinRequest:
      type: object
      required: [customer_id, bin_type, capacity, location]
      properties:
        customer_id:
          type: string
        bin_type:
          type: string
          enum: [residential, commercial, recycling, compost, hazardous]
        capacity:
          type: number
          description: Capacity in cubic yards
        location:
          $ref: '#/components/schemas/Location'
        material_type:
          type: string
          enum: [mixed_waste, recycling, compost, hazardous, yard_waste]

    UpdateBinRequest:
      type: object
      properties:
        bin_type:
          type: string
          enum: [residential, commercial, recycling, compost, hazardous]
        capacity:
          type: number
        current_level:
          type: number
        status:
          type: string
          enum: [active, inactive, maintenance, full]
        location:
          $ref: '#/components/schemas/Location'
        material_type:
          type: string
          enum: [mixed_waste, recycling, compost, hazardous, yard_waste]

    ServiceEvent:
      type: object
      properties:
        id:
          type: string
        customer_id:
          type: string
        bin_id:
          type: string
        route_id:
          type: string
        driver_id:
          type: string
        event_type:
          type: string
          enum: [pickup, delivery, maintenance, inspection]
        status:
          type: string
          enum: [scheduled, in_progress, completed, cancelled, failed]
        scheduled_at:
          type: string
          format: date-time
        completed_at:
          type: string
          format: date-time
        notes:
          type: string
        volume_collected:
          type: number
        created_at:
          type: string
          format: date-time

    CreateServiceEventRequest:
      type: object
      required: [customer_id, bin_id, route_id, driver_id, event_type]
      properties:
        customer_id:
          type: string
        bin_id:
          type: string
        route_id:
          type: string
        driver_id:
          type: string
        event_type:
          type: string
          enum: [pickup, delivery, maintenance, inspection]
        scheduled_at:
          type: string
          format: date-time
        notes:
          type: string

    Address:
      type: object
      required: [street, city, state, zip]
      properties:
        street:
          type: string
        city:
          type: string
        state:
          type: string
        zip:
          type: string
        country:
          type: string
          default: "US"

    Location:
      type: object
      required: [latitude, longitude]
      properties:
        latitude:
          type: number
          format: double
          minimum: -90
          maximum: 90
        longitude:
          type: number
          format: double
          minimum: -180
          maximum: 180
        address:
          type: string
        altitude:
          type: number

    Pagination:
      type: object
      properties:
        page:
          type: integer
        limit:
          type: integer
        total:
          type: integer
        totalPages:
          type: integer
        hasNextPage:
          type: boolean
        hasPrevPage:
          type: boolean

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT