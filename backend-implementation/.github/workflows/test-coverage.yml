# ============================================================================
# WASTE MANAGEMENT SYSTEM - TEST & COVERAGE CI/CD WORKFLOW
# ============================================================================
#
# Comprehensive CI/CD workflow for running tests, analyzing coverage,
# and enforcing quality gates for the waste management system.
#
# Created by: Testing Infrastructure Agent
# Date: 2025-08-12
# Version: 1.0.0
# ============================================================================

name: Test Coverage & Quality Gates

on:
  push:
    branches: [ main, develop, 'feature/*', 'hotfix/*' ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 2 AM UTC for trend analysis
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '20'
  POSTGRES_VERSION: '16'
  REDIS_VERSION: '7'

jobs:
  # Lint and Code Quality
  code-quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run ESLint
        run: npm run lint
        
      - name: Run TypeScript check
        run: npx tsc --noEmit
        
      - name: Check code formatting
        run: npm run format -- --check

  # Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    services:
      redis:
        image: redis:${{ env.REDIS_VERSION }}
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run unit tests
        run: npm run test:unit
        env:
          NODE_ENV: test
          TEST_REDIS_HOST: localhost
          TEST_REDIS_PORT: 6379
          
      - name: Upload unit test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results
          path: |
            coverage/
            junit.xml

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    services:
      postgres:
        image: postgis/postgis:${{ env.POSTGRES_VERSION }}-3.4
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: waste_management_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:${{ env.REDIS_VERSION }}
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U test_user; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
          
      - name: Setup test database
        run: |
          PGPASSWORD=test_password createdb -h localhost -U test_user waste_management_test || true
          PGPASSWORD=test_password psql -h localhost -U test_user -d waste_management_test -c "CREATE EXTENSION IF NOT EXISTS postgis;"
          PGPASSWORD=test_password psql -h localhost -U test_user -d waste_management_test -c "CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";"
        
      - name: Run integration tests
        run: npm run test:integration
        env:
          NODE_ENV: test
          TEST_DB_HOST: localhost
          TEST_DB_PORT: 5432
          TEST_DB_NAME: waste_management_test
          TEST_DB_USER: test_user
          TEST_DB_PASS: test_password
          TEST_REDIS_HOST: localhost
          TEST_REDIS_PORT: 6379
          
      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: |
            coverage/
            junit.xml

  # End-to-End Tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    services:
      postgres:
        image: postgis/postgis:${{ env.POSTGRES_VERSION }}-3.4
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: waste_management_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:${{ env.REDIS_VERSION }}
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Wait for services
        run: |
          until pg_isready -h localhost -p 5432 -U test_user; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
          until redis-cli -h localhost ping; do
            echo "Waiting for Redis..."
            sleep 2
          done
          
      - name: Setup test database
        run: |
          PGPASSWORD=test_password createdb -h localhost -U test_user waste_management_test || true
          PGPASSWORD=test_password psql -h localhost -U test_user -d waste_management_test -c "CREATE EXTENSION IF NOT EXISTS postgis;"
          PGPASSWORD=test_password psql -h localhost -U test_user -d waste_management_test -c "CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";"
        
      - name: Run E2E tests
        run: npm run test:e2e
        env:
          NODE_ENV: test
          TEST_DB_HOST: localhost
          TEST_DB_PORT: 5432
          TEST_DB_NAME: waste_management_test
          TEST_DB_USER: test_user
          TEST_DB_PASS: test_password
          TEST_REDIS_HOST: localhost
          TEST_REDIS_PORT: 6379
          TEST_PORT: 3002
          
      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: |
            coverage/
            junit.xml
            test-screenshots/

  # Security Tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    services:
      postgres:
        image: postgis/postgis:${{ env.POSTGRES_VERSION }}-3.4
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: waste_management_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:${{ env.REDIS_VERSION }}
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Setup test database
        run: |
          PGPASSWORD=test_password createdb -h localhost -U test_user waste_management_test || true
          PGPASSWORD=test_password psql -h localhost -U test_user -d waste_management_test -c "CREATE EXTENSION IF NOT EXISTS postgis;"
          
      - name: Run security tests
        run: npm run test:security
        env:
          NODE_ENV: test
          TEST_DB_HOST: localhost
          TEST_DB_PORT: 5432
          TEST_DB_NAME: waste_management_test
          TEST_DB_USER: test_user
          TEST_DB_PASS: test_password
          TEST_REDIS_HOST: localhost
          TEST_REDIS_PORT: 6379
          
      - name: Run audit for vulnerabilities
        run: npm audit --audit-level high
        
      - name: Upload security test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-test-results
          path: |
            coverage/
            security-report.json

  # Coverage Analysis & Quality Gates
  coverage-analysis:
    name: Coverage Analysis & Quality Gates
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests, security-tests]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          path: test-results
          
      - name: Merge coverage reports
        run: |
          mkdir -p merged-coverage
          # Merge coverage files from all test suites
          if [ -f "test-results/unit-test-results/coverage/coverage-final.json" ]; then
            cp test-results/unit-test-results/coverage/coverage-final.json merged-coverage/
          fi
          if [ -f "test-results/integration-test-results/coverage/coverage-final.json" ]; then
            npx nyc merge test-results/*/coverage merged-coverage/merged.json
          fi
          
      - name: Generate comprehensive coverage report
        run: |
          if [ -f "merged-coverage/coverage-final.json" ] || [ -f "merged-coverage/merged.json" ]; then
            node tests/scripts/coverage-analysis.js
          else
            echo "No coverage data found"
            exit 1
          fi
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: backend
          name: waste-management-backend
          fail_ci_if_error: true
          
      - name: Comment coverage report on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            if (fs.existsSync('coverage/reports/coverage-analysis.md')) {
              const report = fs.readFileSync('coverage/reports/coverage-analysis.md', 'utf8');
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: '## 📊 Coverage Report\n\n' + report
              });
            }
            
      - name: Enforce quality gates
        run: |
          # Check if coverage meets thresholds
          node -e "
            const fs = require('fs');
            const analysis = JSON.parse(fs.readFileSync('coverage/reports/coverage-analysis.json', 'utf8'));
            const violations = analysis.thresholdViolations.filter(v => v.severity === 'critical' || v.severity === 'high');
            if (violations.length > 0) {
              console.log('❌ Quality gates failed:');
              violations.forEach(v => console.log(`  - ${v.type}: ${v.metric} ${v.actual}% < ${v.threshold}%`));
              process.exit(1);
            }
            console.log('✅ All quality gates passed');
          "
          
      - name: Upload coverage analysis reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-analysis-reports
          path: |
            coverage/reports/
            coverage/lcov.info
            coverage/coverage-final.json

  # Performance Tests (on main branch)
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'schedule'
    timeout-minutes: 60
    
    services:
      postgres:
        image: postgis/postgis:${{ env.POSTGRES_VERSION }}-3.4
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: waste_management_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:${{ env.REDIS_VERSION }}
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Setup test environment
        run: |
          PGPASSWORD=test_password createdb -h localhost -U test_user waste_management_test || true
          PGPASSWORD=test_password psql -h localhost -U test_user -d waste_management_test -c "CREATE EXTENSION IF NOT EXISTS postgis;"
        
      - name: Run performance tests
        run: npm run test:performance
        env:
          NODE_ENV: test
          TEST_DB_HOST: localhost
          TEST_DB_PORT: 5432
          TEST_DB_NAME: waste_management_test
          TEST_DB_USER: test_user
          TEST_DB_PASS: test_password
          TEST_REDIS_HOST: localhost
          TEST_REDIS_PORT: 6379
          
      - name: Upload performance test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-test-results
          path: |
            performance-reports/
            load-test-results.json

  # Deploy Quality Report (for main branch)
  deploy-quality-report:
    name: Deploy Quality Dashboard
    runs-on: ubuntu-latest
    needs: [coverage-analysis, performance-tests]
    if: github.ref == 'refs/heads/main' && always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download coverage reports
        uses: actions/download-artifact@v4
        with:
          name: coverage-analysis-reports
          path: quality-dashboard
          
      - name: Download performance reports
        uses: actions/download-artifact@v4
        if: success()
        with:
          name: performance-test-results
          path: quality-dashboard
          
      - name: Deploy to GitHub Pages
        if: success()
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./quality-dashboard
          destination_dir: quality-reports
          
      - name: Notify team on Slack
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#engineering'
          text: '❌ Quality gates failed for waste management system'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

# Workflow notifications and status checks
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true