# ============================================================================
# WASTE MANAGEMENT SYSTEM - PRODUCTION CI/CD PIPELINE
# ============================================================================
#
# Comprehensive production deployment pipeline with security scanning,
# testing gates, automated rollback, and monitoring integration
#
# DevOps Infrastructure Orchestrator - Security Hardened Pipeline
# Version: 2.0.0 - Production Ready
# ============================================================================

name: Production Deployment Pipeline

on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment Environment'
        required: true
        default: 'production'
        type: choice
        options:
        - staging
        - production
      skip_tests:
        description: 'Skip test execution (emergency deployment only)'
        required: false
        default: false
        type: boolean

env:
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: waste-management-system
  NODE_VERSION: '20'
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # ============================================================================
  # SECURITY AND DEPENDENCY SCANNING
  # ============================================================================
  security-scan:
    name: Security & Dependency Scan
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_dispatch' || !inputs.skip_tests
    outputs:
      security-grade: ${{ steps.security-check.outputs.grade }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: |
          npm ci
          cd frontend && npm ci

      - name: Run Security Audit
        id: security-audit
        run: |
          npm audit --audit-level=moderate
          cd frontend && npm audit --audit-level=moderate

      - name: Run Dependency Check
        run: |
          ./scripts/automated-dependency-monitoring.sh validate
          echo "DEPENDENCY_STATUS=passed" >> $GITHUB_ENV

      - name: CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: typescript, javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Trivy Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy Results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Security Grade Assessment
        id: security-check
        run: |
          # Calculate security grade based on findings
          SECURITY_GRADE="A"
          if [ -f "trivy-results.sarif" ]; then
            CRITICAL_COUNT=$(jq '.runs[0].results | map(select(.level == "error")) | length' trivy-results.sarif)
            HIGH_COUNT=$(jq '.runs[0].results | map(select(.level == "warning")) | length' trivy-results.sarif)
            
            if [ "$CRITICAL_COUNT" -gt 0 ]; then
              SECURITY_GRADE="F"
            elif [ "$HIGH_COUNT" -gt 5 ]; then
              SECURITY_GRADE="C"
            elif [ "$HIGH_COUNT" -gt 0 ]; then
              SECURITY_GRADE="B"
            fi
          fi
          
          echo "Security Grade: $SECURITY_GRADE"
          echo "grade=$SECURITY_GRADE" >> $GITHUB_OUTPUT
          
          # Fail if security grade is below B
          if [ "$SECURITY_GRADE" = "C" ] || [ "$SECURITY_GRADE" = "F" ]; then
            echo "❌ Security grade $SECURITY_GRADE is below minimum requirement (B)"
            exit 1
          fi

  # ============================================================================
  # BUILD AND TEST PIPELINE
  # ============================================================================
  build-and-test:
    name: Build & Test Suite
    runs-on: ubuntu-latest
    needs: security-scan
    if: always() && (needs.security-scan.result == 'success' || needs.security-scan.result == 'skipped')
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_DB: waste_management_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Create Test Environment
        run: |
          cp .env.example .env.test
          sed -i 's/DB_HOST=.*/DB_HOST=localhost/' .env.test
          sed -i 's/DB_PORT=.*/DB_PORT=5432/' .env.test
          sed -i 's/REDIS_HOST=.*/REDIS_HOST=localhost/' .env.test
          sed -i 's/REDIS_PORT=.*/REDIS_PORT=6379/' .env.test

      - name: Install Dependencies
        run: |
          npm ci
          cd frontend && npm ci

      - name: Run Database Migrations
        run: |
          npm run db:migrate:test
        env:
          NODE_ENV: test

      - name: Run Unit Tests
        run: |
          npm run test:unit -- --coverage --testTimeout=60000
        env:
          NODE_ENV: test

      - name: Run Integration Tests
        run: |
          npm run test:integration
        env:
          NODE_ENV: test

      - name: Build Backend
        run: |
          npm run build

      - name: Build Frontend
        run: |
          cd frontend && npm run build

      - name: Performance Tests
        run: |
          ./scripts/run-performance-tests.sh
        env:
          NODE_ENV: test

      - name: Upload Test Coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: backend
          fail_ci_if_error: false

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            frontend/dist/
            frontend/.next/
          retention-days: 7

  # ============================================================================
  # DOCKER IMAGE BUILD AND PUSH
  # ============================================================================
  docker-build:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: [security-scan, build-and-test]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and Push Docker Images
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
            BUILD_VERSION=${{ github.sha }}

      - name: Build Frontend Image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./docker/Dockerfile.frontend
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Scan Docker Images
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.meta.outputs.tags }}
          format: 'sarif'
          output: 'docker-trivy-results.sarif'

      - name: Upload Docker Scan Results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'docker-trivy-results.sarif'

  # ============================================================================
  # STAGING DEPLOYMENT
  # ============================================================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/main'
    environment:
      name: staging
      url: https://staging.waste-mgmt.com
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Environment
        run: |
          echo "DEPLOYMENT_ENV=staging" >> $GITHUB_ENV
          echo "IMAGE_TAG=${{ github.sha }}" >> $GITHUB_ENV

      - name: Deploy to Staging
        run: |
          # Setup staging secrets
          ./scripts/setup-secrets.sh staging
          
          # Deploy with monitoring
          DEPLOYMENT_ENV=staging IMAGE_TAG=${{ github.sha }} ./scripts/production-deploy.sh deploy
          
          # Wait for deployment to stabilize
          sleep 60

      - name: Run Smoke Tests
        run: |
          ./scripts/production-deploy.sh smoke-test
        env:
          TARGET_URL: https://staging.waste-mgmt.com

      - name: Run E2E Tests
        run: |
          ./scripts/run-e2e-tests.sh staging
        env:
          E2E_BASE_URL: https://staging.waste-mgmt.com

  # ============================================================================
  # PRODUCTION DEPLOYMENT
  # ============================================================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker-build, deploy-staging]
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    environment:
      name: production
      url: https://waste-mgmt.com
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Validate Security Grade
        run: |
          SECURITY_GRADE="${{ needs.security-scan.outputs.security-grade }}"
          echo "Security Grade: $SECURITY_GRADE"
          
          if [ "$SECURITY_GRADE" != "A" ] && [ "$SECURITY_GRADE" != "B" ]; then
            echo "❌ Security grade $SECURITY_GRADE is below production requirement (A or B)"
            exit 1
          fi
          
          echo "✅ Security validation passed for production deployment"

      - name: Setup Production Environment
        run: |
          echo "DEPLOYMENT_ENV=production" >> $GITHUB_ENV
          echo "IMAGE_TAG=${{ github.sha }}" >> $GITHUB_ENV

      - name: Pre-deployment Backup
        run: |
          ./scripts/production-deploy.sh backup
        env:
          DEPLOYMENT_ENV: production

      - name: Deploy to Production
        id: deploy
        run: |
          # Setup production secrets
          ./scripts/setup-secrets.sh production
          
          # Deploy with comprehensive monitoring
          DEPLOYMENT_ENV=production IMAGE_TAG=${{ github.sha }} ./scripts/production-deploy.sh deploy
          
          echo "deployment-time=$(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT

      - name: Post-deployment Validation
        run: |
          # Wait for deployment to stabilize
          sleep 120
          
          # Run comprehensive health checks
          ./scripts/production-deploy.sh health
          
          # Run production smoke tests
          ./scripts/production-deploy.sh smoke-test

      - name: Setup Production Monitoring
        run: |
          ./scripts/production-monitoring-deploy.sh deploy
        env:
          DEPLOYMENT_ENV: production

      - name: Notify Deployment Success
        if: success()
        run: |
          echo "🚀 Production deployment completed successfully!"
          echo "Deployment Time: ${{ steps.deploy.outputs.deployment-time }}"
          echo "Image Tag: ${{ github.sha }}"
          echo "Security Grade: ${{ needs.security-scan.outputs.security-grade }}"

  # ============================================================================
  # ROLLBACK CAPABILITY
  # ============================================================================
  rollback-production:
    name: Emergency Rollback
    runs-on: ubuntu-latest
    if: failure() && needs.deploy-production.result == 'failure'
    needs: [deploy-production]
    environment:
      name: production
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Execute Rollback
        run: |
          echo "🚨 Executing emergency rollback due to deployment failure"
          DEPLOYMENT_ENV=production ./scripts/production-deploy.sh rollback

      - name: Validate Rollback
        run: |
          sleep 60
          ./scripts/production-deploy.sh health
          echo "✅ Rollback completed and validated"

      - name: Notify Rollback
        run: |
          echo "⚠️ Production rollback executed due to deployment failure"
          echo "Please investigate deployment logs and resolve issues before retry"

  # ============================================================================
  # SECURITY MONITORING DEPLOYMENT
  # ============================================================================
  deploy-monitoring:
    name: Deploy Security Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: success() && (startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch')
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Deploy SIEM Stack
        run: |
          ./scripts/deploy-siem.sh
        env:
          DEPLOYMENT_ENV: production

      - name: Activate 24/7 Monitoring
        run: |
          ./scripts/24-7-monitoring-integration.sh
        env:
          DEPLOYMENT_ENV: production

      - name: Validate Monitoring
        run: |
          ./scripts/monitoring-health-check.sh
          echo "✅ Security monitoring deployed and operational"

# ============================================================================
# WORKFLOW SUMMARY
# ============================================================================
# This CI/CD pipeline provides:
# 
# 1. **Security-First Approach**:
#    - Comprehensive security scanning (CodeQL, Trivy)
#    - Dependency vulnerability checking
#    - Security grade assessment with deployment gates
#    - Docker image security scanning
# 
# 2. **Comprehensive Testing**:
#    - Unit, integration, and performance tests
#    - E2E testing on staging environment
#    - Code coverage reporting
#    - Test environment isolation
# 
# 3. **Multi-Environment Deployment**:
#    - Automated staging deployment for validation
#    - Production deployment with security validation
#    - Blue-green deployment capability
#    - Automated rollback on failure
# 
# 4. **Infrastructure as Code**:
#    - Docker containerization with multi-arch builds
#    - Automated secrets management
#    - Infrastructure provisioning scripts
#    - Monitoring and alerting deployment
# 
# 5. **Production Readiness**:
#    - Health checks and smoke tests
#    - Performance validation
#    - Monitoring integration
#    - Emergency rollback procedures
# 
# **Security Grade Requirements**:
# - Staging: Grade C or above
# - Production: Grade A or B only
# 
# **Deployment Gates**:
# - All tests must pass
# - Security scan must pass
# - No critical vulnerabilities
# - Staging validation required for production
# ============================================================================