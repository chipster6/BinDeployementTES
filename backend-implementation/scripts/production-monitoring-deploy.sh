#!/bin/bash

# ============================================================================
# WASTE MANAGEMENT SYSTEM - PRODUCTION MONITORING DEPLOYMENT
# ============================================================================
#
# Comprehensive production deployment script for monitoring stack with
# automatic activation, health checks, and environment-specific configuration
#
# Created by: DevOps Infrastructure Orchestrator
# Date: 2025-08-15
# Version: 2.0.0 - Production Ready
# ============================================================================

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
DEPLOYMENT_ENV="${DEPLOYMENT_ENV:-production}"
MONITORING_STACK_TIMEOUT=300

# Logging functions
log_info() { echo -e "${BLUE}[INFO]${NC} $1"; }
log_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
log_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1"; }
log_step() { echo -e "${PURPLE}[STEP]${NC} $1"; }
log_deploy() { echo -e "${CYAN}[DEPLOY]${NC} $1"; }

# Function to check deployment prerequisites
check_deployment_prerequisites() {
    log_step "Checking production monitoring deployment prerequisites..."
    
    # Check Docker and Docker Compose
    if ! command -v docker &> /dev/null; then
        log_error "Docker is not installed"
        exit 1
    fi
    
    if ! command -v docker-compose &> /dev/null; then
        log_error "Docker Compose is not installed"
        exit 1
    fi
    
    # Check Docker daemon
    if ! docker info &> /dev/null; then
        log_error "Docker daemon is not running"
        exit 1
    fi
    
    # Check required files
    local required_files=(
        "docker-compose.yml"
        "docker-compose.monitoring.yml"
        "docker/prometheus/prometheus.prod.yml"
        "scripts/monitoring-health-check.sh"
    )
    
    for file in "${required_files[@]}"; do
        if [[ ! -f "$PROJECT_ROOT/$file" ]]; then
            log_error "Required file not found: $file"
            exit 1
        fi
    done
    
    # Check for required tools
    if ! command -v jq &> /dev/null; then
        log_warning "jq not installed - some validations may be limited"
    fi
    
    if ! command -v curl &> /dev/null; then
        log_error "curl is required for health checks"
        exit 1
    fi
    
    log_success "Prerequisites check passed"
}

# Function to prepare monitoring environment
prepare_monitoring_environment() {
    log_step "Preparing monitoring environment for $DEPLOYMENT_ENV..."
    
    cd "$PROJECT_ROOT"
    
    # Create data directories with proper permissions
    log_info "Creating monitoring data directories..."
    mkdir -p docker/data/prometheus
    mkdir -p docker/data/grafana
    mkdir -p docker/data/alertmanager
    mkdir -p logs/monitoring
    
    # Set proper permissions for monitoring services
    # Prometheus runs as nobody (65534:65534)
    # Grafana runs as grafana (472:472)
    if [[ "$DEPLOYMENT_ENV" == "production" ]]; then
        log_info "Setting production security permissions..."
        sudo chown -R 65534:65534 docker/data/prometheus
        sudo chown -R 472:472 docker/data/grafana
        sudo chown -R 65534:65534 docker/data/alertmanager
    else
        # Development permissions - more permissive
        chmod -R 755 docker/data/
    fi
    
    # Create monitoring environment configuration
    create_monitoring_config
    
    log_success "Monitoring environment prepared"
}

# Function to create monitoring configuration
create_monitoring_config() {
    log_info "Creating monitoring configuration for $DEPLOYMENT_ENV..."
    
    local monitoring_env_file="$PROJECT_ROOT/.env.monitoring"
    
    # Generate strong passwords for production
    if [[ "$DEPLOYMENT_ENV" == "production" ]]; then
        local grafana_password=$(openssl rand -base64 32 | tr -d "=+/" | cut -c1-25)
        local grafana_secret=$(openssl rand -base64 32 | tr -d "=+/" | cut -c1-25)
    else
        local grafana_password="admin123"
        local grafana_secret="development_secret"
    fi
    
    cat > "$monitoring_env_file" << EOF
# ============================================================================
# MONITORING ENVIRONMENT CONFIGURATION - $DEPLOYMENT_ENV
# ============================================================================
# Generated by production-monitoring-deploy.sh on $(date)

# Environment Configuration
ENVIRONMENT=$DEPLOYMENT_ENV
DEPLOYMENT_TIMESTAMP=$(date +%s)

# Service Ports
PROMETHEUS_PORT=9090
GRAFANA_PORT=3004
ALERTMANAGER_PORT=9093
NODE_EXPORTER_PORT=9100
CADVISOR_PORT=8080
REDIS_EXPORTER_PORT=9121
POSTGRES_EXPORTER_PORT=9187

# Grafana Configuration
GRAFANA_USER=admin
GRAFANA_PASSWORD=$grafana_password
GRAFANA_SECRET_KEY=$grafana_secret
GRAFANA_DOMAIN=localhost
GRAFANA_COOKIE_SECURE=$([ "$DEPLOYMENT_ENV" = "production" ] && echo "true" || echo "false")
GRAFANA_ANONYMOUS_ENABLED=false
GRAFANA_DISABLE_LOGIN=false
GRAFANA_ALERTING_ENABLED=true
GRAFANA_UNIFIED_ALERTING=true
GRAFANA_LOG_MODE=console
GRAFANA_LOG_LEVEL=$([ "$DEPLOYMENT_ENV" = "production" ] && echo "warn" || echo "info")

# Prometheus Configuration
PROMETHEUS_RETENTION_TIME=$([ "$DEPLOYMENT_ENV" = "production" ] && echo "30d" || echo "7d")
PROMETHEUS_RETENTION_SIZE=$([ "$DEPLOYMENT_ENV" = "production" ] && echo "10GB" || echo "2GB")
PROMETHEUS_WAL_COMPRESSION=true
PROMETHEUS_LOG_LEVEL=$([ "$DEPLOYMENT_ENV" = "production" ] && echo "warn" || echo "info")

# Alertmanager Configuration
ALERTMANAGER_LOG_LEVEL=$([ "$DEPLOYMENT_ENV" = "production" ] && echo "warn" || echo "info")

# Remote Monitoring (Optional - configure for production)
PROMETHEUS_REMOTE_WRITE_URL=
PROMETHEUS_REMOTE_WRITE_USERNAME=
PROMETHEUS_REMOTE_WRITE_PASSWORD=

# Security Configuration
MONITORING_BASIC_AUTH=$([ "$DEPLOYMENT_ENV" = "production" ] && echo "true" || echo "false")
MONITORING_AUTH_USER=monitor
MONITORING_AUTH_PASSWORD=$(openssl rand -base64 32 | tr -d "=+/" | cut -c1-25)

# Plugin Configuration
GRAFANA_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource,grafana-piechart-panel

# Health Check Configuration
HEALTH_CHECK_ENABLED=true
HEALTH_CHECK_INTERVAL=60
HEALTH_CHECK_TIMEOUT=30

EOF
    
    chmod 600 "$monitoring_env_file"
    log_success "Monitoring configuration created: $monitoring_env_file"
}

# Function to deploy monitoring stack
deploy_monitoring_stack() {
    log_step "Deploying monitoring stack for $DEPLOYMENT_ENV environment..."
    
    cd "$PROJECT_ROOT"
    
    # Load monitoring environment
    if [[ -f ".env.monitoring" ]]; then
        set -a
        source ".env.monitoring"
        set +a
        log_info "Loaded monitoring environment configuration"
    fi
    
    # Create Docker network if it doesn't exist
    if ! docker network ls | grep -q "waste-mgmt-network"; then
        log_info "Creating Docker network..."
        docker network create waste-mgmt-network
    fi
    
    # Pull latest images
    log_info "Pulling latest monitoring images..."
    docker-compose -f docker-compose.yml -f docker-compose.monitoring.yml pull
    
    # Start monitoring services
    log_deploy "Starting monitoring services..."
    docker-compose -f docker-compose.yml -f docker-compose.monitoring.yml --profile monitoring up -d
    
    # Wait for services to be ready
    wait_for_monitoring_services
    
    log_success "Monitoring stack deployed successfully"
}

# Function to wait for monitoring services
wait_for_monitoring_services() {
    log_info "Waiting for monitoring services to be ready..."
    
    local services=(
        "prometheus:9090:/-/healthy"
        "grafana:3004:/api/health"
        "node-exporter:9100:/metrics"
        "cadvisor:8080:/healthz"
    )
    
    for service_info in "${services[@]}"; do
        local service=$(echo "$service_info" | cut -d: -f1)
        local port=$(echo "$service_info" | cut -d: -f2)
        local endpoint=$(echo "$service_info" | cut -d: -f3)
        
        log_info "Waiting for $service on port $port..."
        
        local counter=0
        while ! curl -sf "http://localhost:$port$endpoint" &> /dev/null; do
            if [[ $counter -ge $MONITORING_STACK_TIMEOUT ]]; then
                log_error "Timeout waiting for $service to be ready"
                return 1
            fi
            sleep 5
            counter=$((counter + 5))
            echo -n "."
        done
        echo ""
        
        log_success "$service is ready"
    done
}

# Function to configure monitoring services
configure_monitoring_services() {
    log_step "Configuring monitoring services..."
    
    # Configure Grafana data sources and dashboards
    configure_grafana
    
    # Validate Prometheus configuration
    validate_prometheus_config
    
    # Import monitoring dashboards
    import_monitoring_dashboards
    
    log_success "Monitoring services configured"
}

# Function to configure Grafana
configure_grafana() {
    log_info "Configuring Grafana data sources and settings..."
    
    local grafana_url="http://localhost:${GRAFANA_PORT:-3004}"
    local grafana_user="${GRAFANA_USER:-admin}"
    local grafana_password="${GRAFANA_PASSWORD:-admin123}"
    
    # Wait for Grafana to be fully ready
    sleep 30
    
    # Configure Prometheus data source
    local datasource_config='{
        "name": "Prometheus-Production",
        "type": "prometheus",
        "url": "http://prometheus:9090",
        "access": "proxy",
        "isDefault": true,
        "jsonData": {
            "httpMethod": "POST",
            "manageAlerts": true,
            "prometheusType": "Prometheus",
            "prometheusVersion": "2.47.0",
            "cacheLevel": "Medium",
            "disableRecordingRules": false,
            "incrementalQuerying": false,
            "exemplarTraceIdDestinations": []
        }
    }'
    
    if curl -sf -X POST \
        -H "Content-Type: application/json" \
        -u "$grafana_user:$grafana_password" \
        -d "$datasource_config" \
        "$grafana_url/api/datasources" &> /dev/null; then
        log_success "Prometheus data source configured"
    else
        log_warning "Data source configuration may have failed (possibly already exists)"
    fi
    
    # Test data source connectivity
    local datasource_id=$(curl -s -u "$grafana_user:$grafana_password" "$grafana_url/api/datasources" | jq -r '.[] | select(.name=="Prometheus-Production") | .id' 2>/dev/null || echo "")
    
    if [[ -n "$datasource_id" ]]; then
        if curl -sf -u "$grafana_user:$grafana_password" "$grafana_url/api/datasources/$datasource_id/proxy/api/v1/label/__name__/values" &> /dev/null; then
            log_success "Data source connectivity verified"
        else
            log_warning "Data source connectivity test failed"
        fi
    fi
}

# Function to validate Prometheus configuration
validate_prometheus_config() {
    log_info "Validating Prometheus configuration..."
    
    local prometheus_url="http://localhost:${PROMETHEUS_PORT:-9090}"
    
    # Check configuration reload endpoint
    if curl -sf "$prometheus_url/api/v1/status/config" &> /dev/null; then
        log_success "Prometheus configuration is valid"
    else
        log_error "Prometheus configuration validation failed"
        return 1
    fi
    
    # Check targets
    local targets_response=$(curl -s "$prometheus_url/api/v1/targets" 2>/dev/null || echo '{}')
    if echo "$targets_response" | jq -e '.data.activeTargets | length > 0' &> /dev/null; then
        local active_targets=$(echo "$targets_response" | jq '.data.activeTargets | length' 2>/dev/null)
        log_success "Prometheus has $active_targets active target(s)"
    else
        log_warning "No active Prometheus targets found"
    fi
}

# Function to import monitoring dashboards
import_monitoring_dashboards() {
    log_info "Importing monitoring dashboards..."
    
    # Create basic dashboards directory if it doesn't exist
    mkdir -p "$PROJECT_ROOT/docker/grafana/dashboards"
    
    # Create a basic system overview dashboard
    create_system_overview_dashboard
    
    log_success "Monitoring dashboards imported"
}

# Function to create system overview dashboard
create_system_overview_dashboard() {
    local dashboard_file="$PROJECT_ROOT/docker/grafana/dashboards/system-overview.json"
    
    cat > "$dashboard_file" << 'EOF'
{
  "dashboard": {
    "id": null,
    "title": "Waste Management System Overview",
    "tags": ["waste-management", "system"],
    "timezone": "browser",
    "panels": [
      {
        "id": 1,
        "title": "System Load",
        "type": "graph",
        "targets": [
          {
            "expr": "node_load1",
            "legendFormat": "1m load average"
          }
        ],
        "gridPos": {"h": 8, "w": 12, "x": 0, "y": 0}
      },
      {
        "id": 2,
        "title": "Memory Usage",
        "type": "graph",
        "targets": [
          {
            "expr": "node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes * 100",
            "legendFormat": "Memory Available %"
          }
        ],
        "gridPos": {"h": 8, "w": 12, "x": 12, "y": 0}
      }
    ],
    "time": {"from": "now-1h", "to": "now"},
    "refresh": "5s"
  }
}
EOF
    
    log_info "Created system overview dashboard"
}

# Function to run production health checks
run_production_health_checks() {
    log_step "Running production health checks..."
    
    # Run comprehensive health check
    if [[ -f "$PROJECT_ROOT/scripts/monitoring-health-check.sh" ]]; then
        chmod +x "$PROJECT_ROOT/scripts/monitoring-health-check.sh"
        
        log_info "Running monitoring health check..."
        if "$PROJECT_ROOT/scripts/monitoring-health-check.sh" check; then
            log_success "All health checks passed"
        else
            log_warning "Some health checks failed - monitoring may be partially functional"
        fi
    else
        log_warning "Health check script not found - running basic checks..."
        run_basic_health_checks
    fi
}

# Function to run basic health checks
run_basic_health_checks() {
    local failed_checks=0
    
    # Test Prometheus
    if curl -sf "http://localhost:${PROMETHEUS_PORT:-9090}/-/healthy" &> /dev/null; then
        log_success "Prometheus: Healthy"
    else
        log_error "Prometheus: Unhealthy"
        ((failed_checks++))
    fi
    
    # Test Grafana
    if curl -sf "http://localhost:${GRAFANA_PORT:-3004}/api/health" &> /dev/null; then
        log_success "Grafana: Healthy"
    else
        log_error "Grafana: Unhealthy"
        ((failed_checks++))
    fi
    
    # Test Node Exporter
    if curl -sf "http://localhost:9100/metrics" &> /dev/null; then
        log_success "Node Exporter: Healthy"
    else
        log_error "Node Exporter: Unhealthy"
        ((failed_checks++))
    fi
    
    return $failed_checks
}

# Function to show deployment summary
show_deployment_summary() {
    log_step "Production Monitoring Deployment Summary"
    
    echo ""
    log_deploy "Environment: $DEPLOYMENT_ENV"
    log_deploy "Deployment completed at: $(date)"
    
    echo ""
    log_info "Service Status:"
    cd "$PROJECT_ROOT"
    docker-compose -f docker-compose.yml -f docker-compose.monitoring.yml --profile monitoring ps
    
    echo ""
    log_info "Access URLs:"
    echo "  Prometheus:     http://localhost:${PROMETHEUS_PORT:-9090}"
    echo "  Grafana:        http://localhost:${GRAFANA_PORT:-3004}"
    echo "    Username:     ${GRAFANA_USER:-admin}"
    echo "    Password:     ${GRAFANA_PASSWORD:-admin123}"
    echo "  Node Exporter:  http://localhost:9100/metrics"
    echo "  cAdvisor:       http://localhost:8080"
    
    echo ""
    log_info "Management Commands:"
    echo "  Health Check:   ./scripts/monitoring-health-check.sh"
    echo "  View Logs:      docker-compose logs -f prometheus grafana"
    echo "  Restart:        docker-compose --profile monitoring restart"
    echo "  Stop:           docker-compose --profile monitoring down"
    
    echo ""
    log_info "Configuration Files:"
    echo "  Environment:    .env.monitoring"
    echo "  Prometheus:     docker/prometheus/prometheus.prod.yml"
    echo "  Compose:        docker-compose.monitoring.yml"
    
    echo ""
    log_success "Production monitoring deployment completed successfully!"
    log_info "Monitor the logs and run health checks to ensure everything is working correctly."
}

# Main deployment function
main() {
    case "${1:-deploy}" in
        "deploy")
            log_info "Starting production monitoring deployment for $DEPLOYMENT_ENV"
            check_deployment_prerequisites
            prepare_monitoring_environment
            deploy_monitoring_stack
            configure_monitoring_services
            run_production_health_checks
            show_deployment_summary
            ;;
        "update")
            log_info "Updating monitoring stack configuration"
            prepare_monitoring_environment
            configure_monitoring_services
            run_production_health_checks
            log_success "Monitoring stack updated"
            ;;
        "health")
            run_production_health_checks
            ;;
        "status")
            show_deployment_summary
            ;;
        "clean")
            log_warning "Cleaning monitoring deployment"
            cd "$PROJECT_ROOT"
            docker-compose -f docker-compose.yml -f docker-compose.monitoring.yml --profile monitoring down -v
            sudo rm -rf docker/data/prometheus/* docker/data/grafana/* docker/data/alertmanager/* 2>/dev/null || true
            log_success "Monitoring deployment cleaned"
            ;;
        *)
            echo "Usage: $0 {deploy|update|health|status|clean}"
            echo ""
            echo "Environment Variables:"
            echo "  DEPLOYMENT_ENV  - Target environment (production|staging|development)"
            echo ""
            echo "Commands:"
            echo "  deploy   - Full monitoring deployment (default)"
            echo "  update   - Update configuration and health check"
            echo "  health   - Run health checks only"
            echo "  status   - Show deployment status"
            echo "  clean    - Clean monitoring deployment"
            exit 1
            ;;
    esac
}

# Error handling
trap 'log_error "Production monitoring deployment failed at line $LINENO"' ERR

# Run main function
main "$@"