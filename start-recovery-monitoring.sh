#!/bin/bash

# ============================================================================
# RECOVERY MONITORING SYSTEM STARTUP SCRIPT
# ============================================================================
# Generated by: Error Resilience Guardian Agent
# Date: 2025-08-10
# Purpose: Start comprehensive monitoring during critical recovery phase
# ============================================================================

echo "🚨 STARTING WASTE MANAGEMENT RECOVERY MONITORING SYSTEM 🚨"
echo "==========================================================="
echo "Start Time: $(date)"
echo "Recovery Phase: CRITICAL - 37 Issues Identified"
echo "Recovery Timeline: Week 1 of 12"
echo "==========================================================="

# Check if Node.js is installed
if ! command -v node &> /dev/null; then
    echo "❌ Node.js is not installed. Please install Node.js to run the monitoring system."
    exit 1
fi

# Check if we're in the correct directory
if [ ! -f "waste-mgmt-technical-spec.md" ]; then
    echo "❌ Please run this script from the project root directory (BinDeployementTES)"
    exit 1
fi

# Install dependencies if needed
if [ ! -d "node_modules" ]; then
    echo "📦 Installing monitoring system dependencies..."
    npm install
fi

# Create reports directory if it doesn't exist
mkdir -p artifacts/reports

# Make monitoring scripts executable
chmod +x scripts/*.js

echo ""
echo "🔧 INITIALIZING MONITORING COMPONENTS"
echo "====================================="

# Run initial consistency validation
echo "🔍 Running initial consistency validation..."
node scripts/consistency-validator.js
CONSISTENCY_EXIT_CODE=$?

# Run initial progress validation  
echo "📈 Running initial progress validation..."
node scripts/recovery-progress-validator.js
PROGRESS_EXIT_CODE=$?

echo ""
echo "📊 INITIAL ASSESSMENT RESULTS"
echo "============================="

if [ $CONSISTENCY_EXIT_CODE -eq 0 ]; then
    echo "✅ Consistency validation: PASSED"
else
    echo "🚨 Consistency validation: FAILED - Critical inconsistencies detected"
fi

if [ $PROGRESS_EXIT_CODE -eq 0 ]; then
    echo "✅ Progress validation: ACCEPTABLE"
else
    echo "🚨 Progress validation: CONCERNING - Timeline or quality issues detected"
fi

# Check for critical blocking issues
if [ $CONSISTENCY_EXIT_CODE -ne 0 ] && [ $PROGRESS_EXIT_CODE -ne 0 ]; then
    echo ""
    echo "🚨 CRITICAL ALERT: Multiple system failures detected"
    echo "🚨 IMMEDIATE ACTION REQUIRED: Contact technical lead immediately"
    echo ""
fi

echo ""
echo "🚀 STARTING CONTINUOUS MONITORING SERVICES"
echo "==========================================="

# Function to handle graceful shutdown
cleanup() {
    echo ""
    echo "🛑 Shutting down monitoring services..."
    kill $CONTINUOUS_PID 2>/dev/null
    kill $CONSISTENCY_PID 2>/dev/null
    kill $PROGRESS_PID 2>/dev/null
    echo "✅ All monitoring services stopped"
    exit 0
}

# Set up signal handlers
trap cleanup SIGINT SIGTERM

# Start continuous error reporter (main orchestrator)
echo "📡 Starting continuous error reporter..."
node scripts/continuous-error-reporter.js --daemon &
CONTINUOUS_PID=$!

# Start consistency monitoring
echo "🔍 Starting consistency monitoring..."
node scripts/consistency-validator.js --watch &
CONSISTENCY_PID=$!

# Start progress monitoring
echo "📈 Starting progress monitoring..."
node scripts/recovery-progress-validator.js --continuous &
PROGRESS_PID=$!

# Wait a moment for services to start
sleep 3

# Check if all services are running
if kill -0 $CONTINUOUS_PID 2>/dev/null && kill -0 $CONSISTENCY_PID 2>/dev/null && kill -0 $PROGRESS_PID 2>/dev/null; then
    echo ""
    echo "✅ ALL MONITORING SERVICES ACTIVE"
    echo "=================================="
    echo "📊 Real-time Dashboard: http://localhost:3001/recovery-dashboard"
    echo "📄 Reports Directory: artifacts/reports/"
    echo "🔍 Consistency Monitoring: ACTIVE"
    echo "📈 Progress Monitoring: ACTIVE"
    echo "📧 Stakeholder Notifications: ACTIVE"
    echo ""
    echo "🎯 MONITORING PRIORITIES:"
    echo "- Backend foundation implementation (DB models, API endpoints)"
    echo "- Authentication system development"
    echo "- Security framework implementation"
    echo "- Timeline adherence and milestone tracking"
    echo "- Quality gate compliance"
    echo ""
    echo "⚠️  CRITICAL RECOVERY FOCUS AREAS:"
    echo "- Database models: 0/15 implemented"
    echo "- API endpoints: 0/50 implemented" 
    echo "- Security system: 0% complete"
    echo "- External integrations: Not started"
    echo ""
    echo "🚨 ESCALATION TRIGGERS:"
    echo "- Any new critical issues detected"
    echo "- Timeline slippage > 3 days"
    echo "- Quality gate failures"
    echo "- Zero progress on critical path items for > 4 hours"
    echo ""
    echo "👁️  Monitoring active... Press Ctrl+C to stop all services"
    echo ""
    
    # Display real-time status
    while true; do
        sleep 30
        echo "⏰ $(date): Monitoring active - Check dashboard for latest status"
        
        # Check if any process has died
        if ! kill -0 $CONTINUOUS_PID 2>/dev/null; then
            echo "❌ Continuous error reporter stopped - restarting..."
            node scripts/continuous-error-reporter.js --daemon &
            CONTINUOUS_PID=$!
        fi
        
        if ! kill -0 $CONSISTENCY_PID 2>/dev/null; then
            echo "❌ Consistency validator stopped - restarting..."
            node scripts/consistency-validator.js --watch &
            CONSISTENCY_PID=$!
        fi
        
        if ! kill -0 $PROGRESS_PID 2>/dev/null; then
            echo "❌ Progress validator stopped - restarting..."
            node scripts/recovery-progress-validator.js --continuous &
            PROGRESS_PID=$!
        fi
    done
    
else
    echo ""
    echo "❌ FAILED TO START MONITORING SERVICES"
    echo "======================================"
    echo "Please check the logs above for errors and try again."
    echo "If issues persist, contact the technical team immediately."
    
    # Clean up any started processes
    kill $CONTINUOUS_PID 2>/dev/null
    kill $CONSISTENCY_PID 2>/dev/null
    kill $PROGRESS_PID 2>/dev/null
    
    exit 1
fi